package ex01_account;

import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;

import ex01_account.vo.AccountVO;

@Component
public class AccountController {
	@Autowired
	private AccountService svc;
	
	public void setSvc(AccountService svc) {
		this.svc = svc;
	}
	
	public void menu() {
		Scanner scan = new Scanner(System.in);
		
		System.out.println("[은행업무 프로그램]");
		System.out.println("1. 계좌 개설   2: 입금   3: 출금   4: 계좌조회   5: 송금   -1: 종료");
		System.out.print("원하는 번호를 입력해주세요: ");
		int num = scan.nextInt();
		select(num);
	}
	
	public void select(int num) {
		Scanner scan = new Scanner(System.in);
		AccountVO account = new AccountVO();

		int accountNum = -1;
		String name = null;
		int amount = -1;
		String password = null;
		int result = -1;
		
		String verify = null;
		
		switch(num) {
		case 1:
			System.out.print("이름 입력: ");
			name = scan.nextLine();
			account.setName(name);
			
			System.out.print("금액 입력: ");
			amount = scan.nextInt();
			account.setAmount(amount);
			
			System.out.print("암호 입력: ");
			password = scan.nextLine();
			account.setPassword(password);
			
			
			result = svc.makeAccount(account);
			
			if(result == 1) {
				System.out.println("계좌 개설이 완료되었습니다.");
			} else {
				System.out.println("계좌 개설이 실패햇습니다.");
			}
			break;
		case 2:
			System.out.print("계좌번호 입력: ");
			accountNum = scan.nextInt();
			account.setAccountNum(accountNum);
			
			System.out.print("암호 입력: ");
			password = scan.nextLine();
			account.setPassword(password);
			
			System.out.print("금액 입력: ");
			amount = scan.nextInt();
			account.setAmount(amount);
			
			result = svc.deposit(account);
			verify = svc.showAccount(accountNum).getPassword();
			
			if(result == 1 && password.equals(verify)) {
				System.out.println("입금이 완료되었습니다.");
			} else {
				System.out.println("입금이 실패했습니다.");
			}
			break;
		case 3:
			System.out.print("계좌번호 입력: ");
			accountNum = scan.nextInt();
			account.setAccountNum(accountNum);
			
			System.out.print("암호 입력: ");
			password = scan.nextLine();
			account.setPassword(password);
			
			System.out.print("금액 입력: ");
			amount = scan.nextInt();
			account.setAmount(amount);
			
			result = svc.withdraw(account);
			verify = svc.showAccount(accountNum).getPassword();
			
			if(result == 1 && password.equals(verify)) {
				System.out.println("출금이 완료되었습니다.");
			} else {
				System.out.println("출금이 실패했습니다.");
			}
			break;
		case 4:
			System.out.print("계좌번호 입력: ");
			accountNum = scan.nextInt();
			
			System.out.print("암호 입력: ");
			password = scan.nextLine();
			
			account = svc.showAccount(accountNum);
			
			if(password.equals(account.getPassword())) {
				System.out.println("계좌번호: "+account.getAccountNum());
				System.out.println("이름: "+account.getName());
				System.out.println("잔금: "+account.getAmount());
			} else {
				System.out.println("계좌조회에 실패했습니다.");
			}
			break;
		case -1:
			return;
			break;
		default:
			System.out.println("번호를 다시 입력해주세요");
			break;
		}
	}
	
	
}
